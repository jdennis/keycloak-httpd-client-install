.TH keycloak-httpd-client-install 1

.SH NAME
keycloak-httpd-client-install \-
Tools to configure Apache HTTPD as Keycloak client

.SH SYNOPSIS
.B keycloak-httpd-client-install
\fB\-\-app-name \fIAPP_NAME\fR
\fB\-s\fR | \fB\-\-keycloak-server-url \fIKEYCLOAK_SERVER_URL\fR
\fB\-r\fR | \fB\-\-keycloak-realm \fIKEYCLOAK_REALM\fR
\fB\-l\fR | \fB\-\-protected-locations \fIPROTECTED_LOCATIONS\fR
[ options ]


Configure mod_auth_mellon or mod_auth_openidc as Keycloak client

.SH OPTIONS
.TP
.BR \-h ", " \-\-help
show this help message and exit
.TP
.BR \-\-version
display version and exit
.TP
.BR \-\-no\-root\-check
permit running by non\-root
(default: False)
.TP
.BR \-v ", " \-\-verbose
be chatty
(default: False)
.TP
.BR \-d ", " \-\-debug
turn on debug info
(default: False)
.TP
.BR \-\-show\-traceback
exceptions print traceback in addition to error message
(default: False)
.TP
.BR \-\-log\-file " " \fILOG_FILE\fR
log file pathname
(default: /var/log/python\-keycloak\-httpd\-client/keycloak\-httpd\-client\-install.log)
.TP
.BR \-\-app\-name " " \fIAPP_NAME\fR
name of the web app being protected by mod_auth_mellon
(default: None)
.TP
.BR  \-\-force
forcefully override safety checks
(default: False)
.TP
.BR \-\-permit\-insecure\-transport
Normally secure transport such as TLS is required,
defeat this check
(default: False)
.TP
.BR \-\-tls\-verify
TLS certificate verification for requests to the server. May be one of
case insenstive [true, yes, on] to enable, [false, no, off] to
disable. Or the pathname to a OpenSSL CA bundle to use.
(default: True)

.PP
.B Program Configuration:

.TP
.BR \-\-template\-dir " " \fITEMPLATE_DIR\fR
Template location
(default: /usr/share/keycloak\-httpd\-client\-install/templates)
.TP
.BR \-\-httpd\-dir " " \fIHTTPD_DIR\fR
Template location
(default: /etc/httpd)

.PP
.B Keycloak IdP:

.TP
.BR \-r ", " \-\-keycloak\-realm " " \fIKEYCLOAK_REALM\fR
realm name
(default: None)
.TP
.BR \-s ", " \-\-keycloak\-server\-url " " \fIKEYCLOAK_SERVER_URL\fR
Keycloak server URL
(default: None)
.TP
.BR \-a ", " \-\-keycloak\-auth\-role " " \fIroot\-admin|realm\-admin|anonymous\fR
authenticating as what type of user
(default: root\-admin)
.TP
.BR \-u ", " \-\-keycloak\-admin\-username " " \fIKEYCLOAK_ADMIN_USERNAME\fR
admin user name
(default: admin)
.TP
.BR \-P ", " \-\-keycloak\-admin\-password\-file " " \fIKEYCLOAK_ADMIN_PASSWORD_FILE\fR
file containing the admin password (or use a hyphen "-" to indicate the
password will be read from stdin)
(default: None)
.TP
.BR \-\-keycloak\-admin\-realm " " \fIKEYCLOAK_ADMIN_REALM\fR
realm admin belongs to
(default: master)
.TP
.BR \-\-initial\-access\-token " " \fIINITIAL_ACCESS_TOKEN\fR
realm initial access token for client registeration
(default: None)
.TP
.BR \-\-client\-originate\-method " " \fInative|registration\fR
The method used on the Keycloak REST interface for creating a new client.
There are two possibilities.
.RS
.B native
.RS
A Keycloak clientRespresentation JSON object is sent to the Keycloak
client REST endpoint. This is a native Keycloak data format understood
only by Keycloak and as such permits setting values unique to
Keycloak. This is sometimes refered to as the default client data
format.
.RE
.RE
.RS
.B registration
.RS
The data used to create the client is sent to the Keycloak registraton
endpoint. The data format depends on the type of client being created
and can be contolled by the \fI\-\-client\-data\-format\fR. The
registration method has the advantage of not requiring admin
privileges, see the \fBAuthentication Levels and Permissions\fR and
\BDetermining which authentication role to use\fR topics for
details.
(default: native)
.RE
.RE
.TP
.BR \-\-client\-data\-format " " \fBCLIENT_DATA_FORMAT\fR
Must be one of \fBdefault\fR|\fBoidc\fR|\fBsaml2\fR.
When using the registration client originate method this selects the
type of data used to create the client.  For OIDC it can be either
\fBdefault\fR to use Keycloak's clientRespresentation JSON object or
\fBoidc\fR for the OpenID Connect Dynamic Client Registration JSON
object. For OIDC it defaults to \fBdefault\fR For SAML it must be
\fBsaml2\fR.)
(default: default)
.RS
.B default
.RS
A Keycloak clientRepresentation JSON Object sent to the
\fB/realms/{realm}/clients-registrations/default\fR endpoint.
.RE
.RE
.RS
.B oidc
.RS
A OIDC Dynamic Client Registeration JSON object sent to the
\fB/realms/{realm}/clients-registrations/openid-connect\fR endpoint
.RE
.RE
.RS
.B saml2
.RS
A SAML metadata entity descriptor in XML format sent to the
\fB/realms/{realm}/clients-registrations/saml2-entity-descriptor\fR endpoint.
.RE
.RE

.PP
.B Common Client Options

.TP
.BR \-t ", " \-\-client\-type " " \fIopenidc|mellon\fR
Which kind of client. For mod_auth_openidc use "openidc".
For mod_auth_mellon use "mellon".
.TP
.BR \-\-clientid " " \fICLIENTID\fR
The \fBclientid\fR Keycloak identifies the client by. This has different
meanings depending on the type of client.
.RS
.B SAML
.RS
It is the \fBEntityID\fR and defaults to
{client_https_url}/{mellon_root}/{mellon_endpoint_path}/metadata)
.RE
.RE
.RS
.B OIDC
.RS
It is the \fBclientid\fR and defaults to
{client_hostname}-{app_name}
.RE
.RE
.TP
.BR \-\-client\-hostname " " \fICLIENT_HOSTNAME\fR
The fully qualified host name the client is running on or responds to.
.TP
.BR \-\-client\-https\-port " " \fICLIENT_HTTPS_PORT\fR
SSL/TLS port used to connect to client
.TP
.BR \-\-crypto\-passphrase " " \fICRYPTO_PASSPHRASE\fR
Used to encrypt cookies, cache data, etc.
If not supplied a random string will be generated.
.TP
.BR \-\-location\-root " " \fILOCATION_ROOT\fR
Common root ancestor for all protected locations

.PP
.B mod_auth_oidc OIDC RP Client Options

.TP
.BR \-\-oidc\-redirect\-uri " " \fIOIDC_REDIRECT_URI\fR
The OIDC redirect_uri. Must be an antecedent (i.e. child) of one of the
protected locations.
(default: The first protected location appened with "/redirect_uri")

.TP
.BR \-\-oidc\-logout\-uri " " \fIOIDC_REDIRECT_URI\fR
Can be used to add the location the user is redirected to after logout as
an additional redirectUri value in Keycloak's client representation. The
location should not be nested under any of the protected locations,
otherwise the login process would start again.
(default: None)

.TP
.BR \-\-oidc\-client\-secret " " \fIOIDC_CLIENT_SECRET\fR
OIDC client secret
(default: generated random string)

.TP
.BR \-\-oidc\-remote\-user\-claim " " \fIOIDC_REMOTE_USER_CLAIM\fR
claim used when setting the REMOTE_USER variable
(default: "sub")



.PP
.B mod_auth_mellon SP Client Options

.TP
.BR \-\-mellon\-key\-file " " \fIMELLON_KEY_FILE\fR
certficate key file
(default: None)
.TP
.BR \-\-mellon\-cert\-file " " \fIMELLON_CERT_FILE\fR
certficate file
(default: None)
.TP
.BR \-\-mellon\-endpoint " " \fIMELLON_ENDPOINT\fR
Used to form the MellonEndpointPath, e.g.
{mellon_root}/{mellon_endpoint}
(default: mellon)
.TP
.BR \-\-mellon\-idp\-attr\-name " " \fIMELLON_IDP_ATTR_NAME\fR
Name of the attribute mod_auth_mellon adds which will contain the IdP entity id
(default: {client_https_url}/{mellon_root}/{mellon_endpoint_path}/metadata)
.TP
.BR \-\-mellon\-organization\-name " " \fIMELLON_ORGANIZATION_NAME\fR
Add SAML OrganizationName to SP metadata
(default: None)
.TP
.BR \-\-mellon\-organization\-display\-name " " \fIMELLON_ORGANIZATION_DISPLAY_NAME\fR
Add SAML OrganizationDisplayName to SP metadata
(default: None)
.TP
.BR \-\-mellon\-organization\-url " " \fIMELLON_ORGANIZATION_URL\fR
Add SAML OrganizationURL to SP metadata
(default: None)
.TP
.BR \-l ", " \-\-protected\-locations " " \fIPROTECTED_LOCATIONS\fR
Web location to be protected by client. May be specified multiple times
(default: [])

.SH DEPRECATED OPTIONS

.TP
.BR \-p ", " \-\-keycloak\-admin\-password "
It is insecure to pass a password on the command line. Use one of the other
methods detailed in the \fBHow to pass the Keycloak admin password\fR topic.

.TP
.BR  "\-\-mellon\-protected\-locations"
Use \fB\-l\fR or \fB\-\-protected\-locations\fR instead.

.TP
.BR  "\-\-mellon-hostname"
Use \fB\-\-client\-hostname\fR instead.

.TP
.BR  "\-\-mellon\-https\-port"
Use \fB\-\-client\-https\-port\fR instead.

.TP
.BR  "\-\-mellon\-root"
Use \fB\-\-location\-root\fR instead.

.TP
.BR  "\-\-mellon\-entity\-id"
Use \fB\-\-clientid\fR instead.


.SH DESCRIPTION

\fBkeycloak\-httpd\-client\-install\fR is used to configure a httpd
(Apache) instance using mod_auth_openidc or mod_auth_mellon
authentication modules as a client of the Keycloak Identity Provider
(IdP) in order to provide authentication and authorization services to
web applications.

.PP
.B Quick Start

Despite the wealth of options this tool provides it can be run simply
needing a minimum of just 4 pieces of information:

.PP
\fB*\fR An application name
.PP
\fB*\fR A web resource to protect (e.g. location)
.PP
\fB*\fR The Keycloak server and realm
.PP
\fB*\fR Keycloak authentication credentials

.PP
.B Simple Example
.RS
sudo keycloak\-httpd\-client\-install \\
    --app-name foo \\
    --protected-location /private \\
    --keycloak-server-url keycloak.example.com \\
    --keycloak-realm my_organization \\
    --keycloak-admin-password-file admin_passwd
.nf
.fi
.RE
.PP
Note, by default mod_auth_openidc will be configured as the client. To
configure mod_auth_mellon instead add this option: \fB\-\-client\-type mellon\fR.
.PP
.B How to pass the Keycloak admin password

.PP
The Keycloak admin password may be passed via one of the possible ways listed
here in the order the tool looks for the password.

.PP
\fB1.\fR Try the \fB\-\-keycloak\-admin\-password\-file\fR argument.
If it's a hyphen read the password from stdin, otherwise treat the argument
as the name of a file, open the file and read the password from the file.

.PP
\fB2.\fR Test for the existence of the \fBKEYCLOAK_ADMIN_PASSWORD\fR
environment variable. If the \fBKEYCLOAK_ADMIN_PASSWORD\fR is defined
read the password from it.

.PP
\fB4.\fR Prompt for the password from the terminal.

.PP
.B Authentication Levels and Permissions

.PP
The tool is capable of range of configuration steps. But the extent of those operations may be circumscribed by the privilege level (authorization) the tool is run with. The privilege level is determined by the \fB\-\-keycloak\-auth\-role\fR command line option which may be one of:

.PP
\fBroot\-admin\fR: The Keycloak installation has a super realm normally called \fImaster\fR which is the container for all realms hosted by the Keycloak instance. A user with administration priviliges in the \fImaster\fR realm can perform all operations on all realms hosted by the instance. Think of such a user as a root user or root admin.
.PP
\fBrealm\-admin\fR: Each subordinate realm in the Keycloak instance may have it's own administrator(s) whose privileges are restricted exclusively to that realm.
.PP
\fBanonymous\fR: The tool does not authenticate as a user and hence no priviliges are granted. Any privilege is granted by virtue of an \fIinitial access token\fR passed in via the \fB\-initial\-access\-token\fR command line option. Think of an initial access token as a one time password scoped to a specific realm. The initial access token must be generated by an administrator with sufficient priviliges on the realm and given to the user of the tool. The priviliges conferred by the initial access token are limited to registering the client in the realm utilizing the Keycloak client registration service.
.PP
Selecting which authencation role will be used is determined by a combination of the \fB\-\-keycloak\-auth\-role\fR option and the \fB\-\-keycloak\-admin\-realm\fR option. When the authentication role is one of \fIroot\-admin\fR or \fIrealm\-admin\fR the tool will authenticate as a user in a specific realm, the \fB\-\-keycloak\-admin\-realm\fR option declares the realm the administrator will authenticate to. For the \fIroot\-admin\fR role this is typically the \fImaster\fR realm. For the \fIrealm\-admin\fR role this would be realm the tool is registrating the client in.

.PP
.B Determining which authentication role to use

In general the principle of \fIleast privilige\fR should apply. Grant to the tool the least privilige necessary to perform the required action. In oder of least privilige to greatest privilige the following operations are possible under the defined authentication roles:

.PP
.B anonymous
.RS
.PP
\fB*\fR Can register the client using only the Keycloak client registration service. The tool cannot determine a prori if the client already exists in the realm nor can it adjust any configuration options on the client.
.PP
\fB*\fR The realm must pre\-exist.
.RE
.PP
.B realm\-admin
.RS
.PP
\fB*\fR Can enumerate the existing clients in the realm to determine if a conflict would occur.
.PP
\fB*\fR Can delete a pre\-existing client and replace it with the new client definition if the \fB\-\-force\fR option is supplied.
.PP
\fB*\fR Can modify the clients configuration.
.PP
\fB*\fR Can use either the client registration service or the REST API to create the client.
.PP
\fB*\fR The realm must pre\-exist and contain the realm admin user.
.RE
.PP
.B root\-admin
.RS
.PP
\fB*\fR Includes all of the priviliged operation conferred by the \fIrealm\-admin\fR.
.PP
\fB*\fR Can enumerate existing realms on the Keycloak instance to verify the existence of the target realm the client is to be installed in.
.PP
\fB*\fR Can create the target realm if it does not exist.
.RE
.PP
.B Client creation methods

Keycloak offers two methods to add a client to a realm Selected with
\fB\-\-client\-originate\-method\fR option.
.PP
\fBregistration\fR
.RS
Originally designed to support the OIDC
Dynmaic Client Registration service it can also be used to register
clients with Keycloak's default clientRepresentation JSON Object or
SAML SP clients using SAML Entity Descriptor Metadata in XML format
depending on the exact endpoint utilized. See
\fB\-\-cient-data-formt\fR for details. The primary benefit of the
client origination method is not requiring admin privileges, rather an
initial access token issued by the realm admin is used, this is called
anonymous authentication. Selected with
\fB\-\-client\-originate\-method register\fR.
.PP
The client registration service requies the use of an initial access
token. For all authentiction roles an initial access token can be
provided on the command line via the \fBinitial\-access\-token\fR
option. The initial access token will have to have been provided by a
Keycloak administrator who pre\-creates it. If the authencation role
is either \fIroot\-admin\fR or \fIrealm\-admin\fR the tool has
sufficient privilige to obtain an initial access token on it's behalf
negating the need for a Keycloak admin to supply one externally.
.RE
\fBnative\fR
.RS
This method sends Keycloak's native
clientRepresentation JSON object to the
\fBauth/admin/realms/{realm}/clients\fR client endpoint to create or
update a client.
.PP
If the client is a SAML SP it's Entity Descriptor XML Metadata is
first sent to the
\fBauth/admin/realms/{realm}/client-description-converter\fR
conversion endpoint which returns a native clientRepresention JSON
object derived from the SAML SP metadata. The derived
clientRepresentation is subsequently sent to the client REST endpoint.
.RE
.PP
The client registration service may be used by the following authentication roles:
.RS
.PP
\fB*\fR root\-admin
.PP
\fB*\fR realm\-admin
.PP
\fB*\fR anonymous (requires use of \fB\-\-initial\-access\-token\fR)
.RE
.PP
The REST API may be used by the following authentication roles:
.RS
.PP
\fB*\fR root\-admin
.PP
\fB*\fR realm\-admin
.RE

.SH OPERATION

.PP
\fBkeycloak\-httpd\-client\-install\fR performs the following
operational steps which can be grouped into two major operational groups:
.PP
.PP
\fB*\fR Configure the httpd client
.PP
\fB*\fR Add the httpd client to the Keycloak server.
.PP
.B Configure the httpd client
.PP
\fB*\fR Create directories.
.RS
.PP
Files written by \fBkeycloak\-httpd\-client\-install\fR need a
destination directory (see \fBFILES\fR). If the necessary directories
are not present they are created.
.RE
.PP
\fB*\fR Set up template environment
.RS
.PP
Many of the files written by \fBkeycloak\-httpd\-client\-install\fR are based on \fIjinga2\fR templates. The default template file location can be overridden with the \fB\-\-template\-dir\fR option.
.RE
.PP
\fB*\fR Set up X509 Certificiates.
.RS
.PP
Some client configurations require the use of X509 certificates and
keys.  If these were not supplied as an option a self-signed
certificate will be generated.
.RE
.PP
\fB*\fR Build the mod_auth_openidc or mod_auth_mellon httpd config file.
.RS
.PP
This is the httpd configuration file which will be installed in
Apache's conf.d configuration directory. It contains configuration
directives for mod_auth_openidc or mod_auth_mellon depending on which
client is being configured.
.RE
.PP
\fB*\fR Build the client's protocol description
.RS
.PP

For mod_auth_openidc this means building JSON object which describes
the client. It will be sent to the Keycloak server to add the client
to the realm. For mod_auth_mellon this means building the SAML SP XML
metadata. The SP metadata is used both by mod_auth_mellon when it
initializes and is also sent to the Keycloak server when adding the
client to the Keycloak realm.
.RE
.PP
.B Add the httpd client to the Keycloak server.
.PP
\fB*\fR Connect to Keycloak Server.
.RS
.PP
A session is established with the Keycloak server. OAuth2 is used to
log in as the admin user using the \fB\-\-keycloak\-admin\-username\fR
and \fB\-\-keycloak\-admin\-password\-file\fR options if you're using
admin privileges. Otherwise a non-authenticated (e.g. anonymous)
session is established and an initial access token supplied to you by
a Keycloak admin will be used to register the client.
.RE
.PP
\fB*\fR Query realms from Keycloak server, optionally create new realm.
.RS
.PP
Keycloak supports multi\-tenancy, it may present many IdP's each one
specified by a Keycloak realm. The \fB\-\-keycloak\-realm\fR option
identifies which Keycloak realm we will bind to. The Keycloak realm
may already exist on the Keycloak server, if it does
\fBkeycloak\-httpd\-client\-install\fR will use it. If the Keycloak
realm does not exist yet it will be created for you.
.PP
Requires the \fIroot\-admin\fR auth role.
.RE
.PP
\fB*\fR Query realm clients from Keycloak server, optionally delete existing.
.RS
.PP
Before a new client can be added to the Keycloak realm we must assure
it does not conflict with an existing client. If the client is already
registered in the Keycloak realm
\fBkeycloak\-httpd\-client\-install\fR will stop processing and exit
with an error unless the \fB\-\-force\fR option is
used. \fB\-\-force\fR will cause the existing client on the Keycloak
realm to be deleted first so that it can be replaced in the next step.
.PP
Requires either the \fIroot\-admin\fR or \fIrealm\-admin\fR auth role.
.RE
.PP
\fB*\fR Create new client in Keycloak realm.
.RS
.PP
The client description is sent to one of the Keycloak server's REST
endpoints to add the client to the realm. The choice of which endpoint
is used and the data format sent is a function of the
\fIclient\-originate\-method\fR, the auth role and client data
format. Most users will simply allow the tool to select the optimal
combination.
.RE
.PP
\fB*\fR Adjust client configuration
.RS
.PP
Override default Keycloak client values. This varies by Keycloak release.
.PP
Requires either the \fIroot\-admin\fR or \fIrealm\-admin\fR auth role.
.RE
.PP
\fB*\fR Add attributes to be returned in assertion
.RS
.PP
The client is configured to return necessary attributes. The added attributes are:
.RS
.PP
\fB*\fR Groups user is a member of.
.RE
.PP
Requires either the \fIroot\-admin\fR or \fIrealm\-admin\fR auth role.
.RE
.PP
\fB*\fR Retrieve IdP metadata from Keycloak server.
.RS
.PP
The mod_auth_mellon SP needs SAML metadata that describes the Keycloak
IdP. The metadata for the Keycloak IdP is fetched from the Keycloak
server and stored in a location referenced in the mod_auth_mellon SP
httpd configuration file. (see \fBFILES\fR) mod_auth_openidc also
needs a description of the Keycloak IdP but unlike mod_auth_mellon it
is capable of fetching the Keycloak IdP description automatically via
the \fBOIDCProviderMetadataURL\fR directive and periodically
refreshing it. Therefore this step is skipped for mod_auth_openidc.
.RE

.PP
.B STRUCTURE
.PP
The overarching organization is to produce a web application. An
independent set of mod_auth_openidc or mod_auth_mellon files are
created per application and registered with the Keycloak server. This
permits multiple indpendent client and/or protected
web resources to be handled by one Apache instance. When you run
\fBkeycloak\-httpd\-client\-install\fR you must supply an application
name via the \fB\-\-app\-name\fR option.
.PP

Within the web application you may protect multiple independent web
resources specified via the \fB\-\-protected\-locations\fR
/xxx option. This will cause a location block similar to this to be
generated per location (depending on the client type):
.PP
.B mod_auth_openidc
.RS
.nf
OIDCClientID ...
OIDCProviderMetadataURL ...
OIDCCryptoPassphrase ...
OIDCClientSecret ...
OIDCRedirectURI ...
OIDCRemoteUserClaim ...

<Location /xxx>
    AuthType openid-connect
    Require valid-user
</Location>
.fi
.RE
.B mod_auth_mellon
.RS
.nf
<Location />
    MellonEnable info
    MellonEndpointPath ...
    MellonSPMetadataFile ...
    MellonSPPrivateKeyFile ...
    MellonSPCertFile ...
    MellonIdPMetadataFile ...
    MellonIdP ...
</Location>

<Location /xxx>
    AuthType Mellon
    MellonEnable auth
    Require valid-user
</Location>
.fi
.RE
.PP
These will be added to the client's HTTPD configuration file.
.PP
The location of the client configuration directives in the client
configuration file depend on the client type.
.PP
For mod_auth_openidc the directives are global to the module and hence
can be located anywhere outside a location directive. The tool places
them at the top of the client configuration file.
.PP
For mod_auth_mellon the directives must be located in a location block
handled by mod_auth_mellon. mod_auth_mellon supports directive
inheritance, thus any mod_auth_mellon location block located below in
the URL hierarchy will inherit directives from above. To avoid
duplicate declarations of mod_auth_mellon directives that can be
shared by subsequent mod_auth_mellon location block (and protect
against future cut-n-paste errors) the shared common mod_auth_mellon
directives are located at the \fBlocation\-root\fR.
.PP
.B Changes from the previous version

keycloak-httpd-client-install now supports mod_auth_opendic in addition
to mod_auth_mellon.

Some mod_auth_mellon specific options (e.g. \fB\-\-mellon\-*\fR) can
be shared with mod_auth_openidc. These were renamed to have a
\fB\-\-client\-*\fR prefix instead. The previous names continue to
work but will emit a deprecaton warning and will be removed in a
future release.

The \fB\-\-client\-originate\fR \fBdescriptor\fR method has been
renamed to \fBnative\fR.

The \fB{httpd_dir}/saml2\fR directory containing SAML data files
(e.g. metadata, keys, certs, etc.) has been renamed to
\fB{httpd_dir}/federation\fR to better reflect it's use as a location
to store data used in federated authentication.

.SH FILES

Directories and files created by running
\fBkeycloak\-httpd\-client\-install\fR:

.TP
.B {httpd_dir}/federation
This directory contains data files used during federated authentication.

.TP
.B {httpd_dir}/conf.d/{app_name}_mellon_keycloak_{realm}.conf
This is the primary mod_auth_mellon configuration file for the application. It
binds to the Keycloak realm IdP. It is generated from the
\fImellon_httpd.conf\fR template file.

.TP
.B {httpd_dir}/federation/{app_name}.cert
The mod_auth_mellon SP X509 certficate file in PEM format.

.TP
.B {httpd_dir}/federation/{app_name}.key
The mod_auth_mellon SP X509 key file in PEM format.

.TP
.B {httpd_dir}/federation/{app_name}_keycloak_{realm}_idp_metadata.xml
The Keycloak SAML2 IdP metadata file. It is fetched from the Keycloak server.

.TP
.B {httpd_dir}/federation/{app_name}_sp_metadata.xml
The mod_auth_mellon SAML2 SP metadata file. It is generated from the
\fIsp_metadata.xml\fR template file.

.TP
.B {httpd_dir}/conf.d/{app_name}_oidc_keycloak_{realm}.conf
This is the primary mod_auth_openidc configuration file for the application. It
binds to the Keycloak realm IdP. It is generated from the
\fBoidc_httpd.conf\fR template file.

.PP
.B Files referenced by \fBkeycloak\-httpd\-client\-install\fR when it runs:

.TP
.B /usr/share/python\-keycloak\-httpd\-client/templates/*
jinja2 templates

.PP
.B Log files:
.TP
.B /var/log/python\-keycloak\-httpd\-client/keycloak\-httpd\-client\-install.log
Installation log file

.PP
.B DEBUGGING
.PP
The \fB\-\-verbose\fR and \fB\-\-debug\fR options can be used to increase the level of detail emitted on the console. However, note the log file logs everything at the \fIDEBUG\fR level so it is usually easier to consult the log file when debugging (see \fBLOGGING\fR)

.PP
.B LOGGING
.PP
\fBkeycloak\-httpd\-client\-install\fR logs all it's operations to a rotated log file. The default log file can be overridden with the \fB\-\-log\-file\fR option. Each run of \fBkeycloak\-httpd\-client\-install\fR will create a new log file. Any previous log file will be rotated as a numbered verson keeping a maximum of 3 previous log files. Logging to the log file occurs at the \fIDEBUG\fR level that includes all HTTP requests and responses, this is useful for debugging.

.PP
.B TEMPLATES
.PP
Many of the files generated by \fBkeycloak\-httpd\-client\-install\fR are produced via jinja2 templates substituting values determined by \fBkeycloak\-httpd\-client\-install\fR when it runs. The default template file location can be overridden with the \fB\-\-template\-dir\fR option.

.PP
.B {template_dir}/mellon_httpd.conf
The template used to generate the httpd configuration file for mod_auth_mellon
{httpd_dir}/conf.d/{app_name}_mellon_keycloak_{realm}.conf

.PP
.B {template_dir}/sp_metadata.tpl
The template used to generate SAML SP Metadata.

.PP
.B {template_dir}/oidc_httpd.conf
The template used to generate the httpd configuration file for mod_auth_openidc
{httpd_dir}/conf.d/{app_name}_oidc_keycloak_{realm}.conf

.PP
.B {template_dir}/oidc-client-registration.tpl
The template used to generate the OIDC Dynamic Client Registration
data sent to Keycloak's client registration endpoint
\fB/realms/{realm}/clients-registrations/openid-connect\fR.

.PP
.B {template_dir}/oidc-client-representation.tpl
The template used to generate the Keycloak clientRepresentation JSON
object used to create a new client using native method or the
registration method using the default client data format at the
\fB/realms/{realm}/clients-registrations/default\fR endpoint.

.PP
.SH EXIT STATUS
.RS
.PP
\fB0\fR: SUCCESS
.PP
\fB1\fR: OPERATION_ERROR
.PP
\fB2\fR: CONFIGURATION_ERROR
.PP
\fB3\fR: INSUFFICIENT_PRIVILEGE
.PP
\fB4\fR: COMMUNICATION_ERROR
.PP
\fB5\fR: ALREADY_EXISTS_ERROR
.RE

.SH AUTHOR
John Dennis <jdennis@redhat.com>
